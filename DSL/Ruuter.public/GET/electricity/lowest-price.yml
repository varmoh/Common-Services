declaration:
  call: declare
  version: 0.1
  name: "Lowest electricity Price Service"
  description: |
    This service fetches the lowest elering electricity prices for today
  method: get
  returns: json

# Prepare Dates based on userDate
prepare:
  assign:
    chatId: ${incoming.params.chatId}
    authorId: ${incoming.params.authorId}
    startDateTime: "${new Date(new Date().getTime() - 24 * 60 * 60 * 1000).toISOString().split('T')[0] + 'T21:00:00.000Z'}"
    endDateTime: "${new Date().toISOString().split('T')[0] + 'T20:59:59.000Z'}"
  next: priceForToday

priceForToday:
  call: http.get
  args:
    url: https://dashboard.elering.ee/api/nps/price
    query:
      start: ${startDateTime}
      end: ${endDateTime}
  result: eleringToday
  next: assignVariables

assignVariables:
  assign:
    minPrice: ${eleringToday.response.body.data.ee.sort((a, b) => a.price - b.price)[0].price}
    minPriceTimestamp: ${eleringToday.response.body.data.ee.sort((a, b) => a.price - b.price)[0].timestamp}

    # currently doez not account for DST when changing to winter
    tallinnOffset: 7200  # Tallinn is UTC+3 during DST (3 hours in seconds)
    adjustedTimestamp: ${minPriceTimestamp + tallinnOffset} 
    adjustedHour: ${Math.floor((adjustedTimestamp % 86400) / 3600)}
    timeVar: ${("0" + adjustedHour).slice(-2) + ":00"}
  next: assignResponse

assignResponse:
  assign:
    res: {
      "result": "Täna on kõige madala elektri börsihind kell ${timeVar}, hinnaga ${minPrice} €/mWh"
    }
  next: formatMessages

# format throgh DM bot response to messages
formatMessages:
  call: http.post
  args:
    url: "[#DMAPPER]/common-services/hbs/bot_responses_to_messages"
    headers:
      type: json
    body:
      data:
        {
          "botMessages": "${[res]}",
          "chatId": "${chatId}",
          "authorId": "${authorId}",
          "authorFirstName": "",
          "authorLastName": "",
          "authorTimestamp": "${new Date().toISOString()}",
          "created": "${new Date().toISOString()}",
        }
  result: formatMessage
  next: returnResult

returnResult:
  return: ${formatMessage.response.body}

