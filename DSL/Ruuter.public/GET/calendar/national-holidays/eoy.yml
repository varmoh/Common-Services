declaration:
  call: declare
  version: 0.1
  name: "Find Holidays Until End of Year"
  description: "Returns all holidays from today till the end of the year"
  method: GET
  accepts: JSON
  returns: JSON
  allowlist:
    body:
    - field: chatId
      type: string
      description: "The chat ID for the message"
    - field: authorId
      type: string
      description: "The author ID for the message"
    - field: today
      type: string
      description: "The current date in ISO format - ex. 'yyyy-mm-dd'"
    - field: yearEnd
      type: string
      description: "The end of the year in ISO format - ex. 'yyyy-mm-dd'"

prepare:
  assign:
    chatId: ${incoming.params.chatId}
    authorId: ${incoming.params.authorId}
    today: ${new Date().toISOString().split("T")[0]}
    yearEnd: ${today.split("-")[0] + "-12-31"}
  next: makeApiCall

makeApiCall:
  call: reflect.mock
  args:
    url: "www.example.com"
    response: 
      holidays:
        # --- Riigipühad ja puhkepäevad 2024 ---
        - date: "2024-01-01"
          name: "uusaasta"
        - date: "2024-02-24"
          name: "iseseisvuspäev, Eesti Vabariigi aastapäev"
        - date: "2024-03-29"
          name: "suur reede"
        - date: "2024-03-31"
          name: "ülestõusmispühade 1. püha"
        - date: "2024-05-01"
          name: "kevadpüha"
        - date: "2024-05-19"
          name: "nelipühade 1. püha"
        - date: "2024-06-23"
          name: "võidupüha"
        - date: "2024-06-24"
          name: "jaanipäev"
        - date: "2024-08-20"
          name: "taasiseseisvumispäev"
        - date: "2024-12-24"
          name: "jõululaupäev"
        - date: "2024-12-25"
          name: "esimene jõulupüha"
        - date: "2024-12-26"
          name: "teine jõulupüha"
  result: holidayData
  next: validateHolidaysEOY

validateHolidaysEOY:
  assign:
    holidaysEOY: ${holidayData.response.body.holidays
        .filter(holiday => holiday.date >= today && holiday.date <= yearEnd)
        .sort((a, b) => new Date(a.date) - new Date(b.date))}
  next: formatResult

formatResult:
  call: http.post
  args:
    url: "[#DMAPPER]/common-services/hbs/calendar/national-holidays/get_national_holiday_eoy"
    headers:
      type: json
    body:
      data: ${holidaysEOY}
  result: formattedHolidays
  next: assignResponse

assignResponse:
  assign:
    res: ${formattedHolidays.response.body}
  next: formatMessages

# format throgh DM bot response to messages
formatMessages:
  call: http.post
  args:
    url: "[#DMAPPER]/common-services/hbs/bot_responses_to_messages"
    headers:
      type: json
    body:
      data:
        {
          "botMessages": "${[res]}",
          "chatId": "${chatId}",
          "authorId": "${authorId}",
          "authorFirstName": "",
          "authorLastName": "",
          "authorTimestamp": "${new Date().toISOString()}",
          "created": "${new Date().toISOString()}",
        }
  result: formatMessage

return_result:
  return: ${formatMessage.response.body}
