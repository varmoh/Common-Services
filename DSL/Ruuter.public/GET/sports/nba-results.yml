declaration:
  call: declare
  version: 0.1
  name: "NBA Results Service"
  description: |
    This service fetches the latest NBA game results from a public API.
  method: get
  returns: json

prepare:
  assign:
    chatId: ${incoming.params.chatId}
    authorId: ${incoming.params.authorId}
    yesterdayDate: "${new Date(new Date().getTime() - 24 * 60 * 60 * 1000).toISOString().split('T')[0]}"
  next: fetchNbaResults

fetchNbaResults:
  call: http.get
  args:
    url: "https://api.balldontlie.io/v1/games?start_date=${yesterdayDate}&end_date=${yesterdayDate}"
    headers:
      Authorization: "[#NBA_API_KEY]"
  result: nbaApiResponse
  next: formatResults

formatResults:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/commonservice/hbs/sports/formatNBAResults"
    headers:
      type: json
    body:
      data: ${nbaApiResponse.response.body.data}
  result: formatMessage
  next: assignResponse

assignResponse:
  assign:
    res: "${formatMessage.response.body}"
  next: formatMessages

formatMessages:
  call: http.post
  args:
    url: "[#CHATBOT_DMAPPER]/common-services/hbs/bot_responses_to_messages"
    headers:
      type: json
    body:
      data:
        {
          "botMessages": "${[res]}",
          "chatId": "${chatId}",
          "authorId": "${authorId}",
          "authorFirstName": "",
          "authorLastName": "",
          "authorTimestamp": "${new Date().toISOString()}",
          "created": "${new Date().toISOString()}",
        }
  result: formatMessage
  next: returnResult

returnResult:
  return: ${formatMessage.response.body}